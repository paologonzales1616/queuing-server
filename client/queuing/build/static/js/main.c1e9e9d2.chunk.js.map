{"version":3,"sources":["assets/images/84688527_483293078998820_6981636263551959040_n.jpg","core/config/index.js","pages/admin/index.js","pages/client/index.js","App.js","index.js"],"names":["module","exports","config","ENV","title","host","headers","Accept","Index","useState","windows","setWindows","show","setShow","newCounter","setNewCounter","showNew","setShowNew","selectedWindow","setSelectedWindow","handleClose","handleNewClose","getWindows","a","fetch","res","json","body","updateWindow","params","options","method","JSON","stringify","content","console","log","counter","useEffect","document","useLayoutEffect","Container","fluid","Card","className","Row","Col","Button","variant","size","onClick","Table","striped","bordered","hover","width","map","data","index","key","Form","Control","type","value","onChange","e","target","status","number","as","InputGroup","FormControl","Append","parseInt","handleShow","Modal","onHide","Header","closeButton","Title","Body","Footer","deleteWindow","Group","controlId","Label","placeholder","newWindow","setInterval","md","Image","src","Ad","height","alt","style","fontWeight","fontSize","App","exact","path","component","AdminPage","ClientPage","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c1e9e9d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/84688527_483293078998820_6981636263551959040_n.22a7866b.jpg\";","export const config = {\n    ENV: \"dev\",\n    title: \"Orbit Tracking\",\n    host: \"\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  ","import React, { useState, useLayoutEffect, useEffect } from \"react\";\nimport {\n  Container,\n  Table,\n  Row,\n  Col,\n  Card,\n  Button,\n  Form,\n  InputGroup,\n  FormControl,\n  Modal\n} from \"react-bootstrap\";\nimport { config } from \"../../core/config\";\nconst Index = () => {\n  const [windows, setWindows] = useState([]);\n  const [show, setShow] = useState(false);\n  const [newCounter, setNewCounter] = useState(\"\");\n  const [showNew, setShowNew] = useState(false);\n  const [selectedWindow, setSelectedWindow] = useState(null);\n\n  const handleClose = () => {\n    setSelectedWindow(null);\n    setShow(false);\n  };\n  const handleShow = index => {\n    setSelectedWindow(index);\n    setShow(true);\n  };\n\n  const handleNewClose = () => {\n    setShowNew(false);\n  };\n  const handleNewShow = () => {\n    setShowNew(true);\n  };\n\n  useEffect(() => {\n    document.title = \"Queuing System\";\n  }, []);\n\n  useLayoutEffect(() => {\n    getWindows();\n  }, []);\n\n  async function getWindows() {\n    const res = await fetch(`${config.host}/windows`);\n    const body = await res.json();\n    setWindows(body.windows);\n  }\n\n  async function updateWindow(params) {\n    const options = {\n      headers: config.headers,\n      method: \"PUT\",\n      body: JSON.stringify({\n        ...params\n      })\n    };\n    const res = await fetch(`${config.host}/windows`, options);\n    const content = await res.json();\n    getWindows();\n\n    console.log(content);\n  }\n\n  async function newWindow() {\n    const options = {\n      headers: config.headers,\n      method: \"POST\",\n      body: JSON.stringify({\n        counter: newCounter\n      })\n    };\n    const res = await fetch(`${config.host}/windows`, options);\n    const content = await res.json();\n    getWindows();\n    handleNewClose();\n    setNewCounter(\"\");\n    console.log(content);\n  }\n\n  async function deleteWindow(params) {\n    const options = {\n      headers: config.headers,\n      method: \"DELETE\",\n      body: JSON.stringify({\n        ...params\n      })\n    };\n    const res = await fetch(`${config.host}/windows`, options);\n    const content = await res.json();\n    getWindows();\n    handleClose();\n    console.log(content);\n  }\n\n  return (\n    <Container fluid>\n      <Card className=\"p-2 mb-1 mt-1 text-center\">\n        <h2 className=\"m-0 p-0\">Admin Console</h2>\n      </Card>\n      <Card className=\"p-2\">\n        <Row>\n          <Col>\n            <Button\n              className=\"float-right mb-2\"\n              variant=\"outline-success\"\n              size=\"sm\"\n              onClick={() => handleNewShow()}\n            >\n              New Counter\n            </Button>\n            <Table striped bordered hover className=\"text-center\">\n              <thead>\n                <tr>\n                  <th width=\"15%\">Counter</th>\n                  <th width=\"20%\">Status</th>\n                  <th width=\"20%\">Number</th>\n                  <th width=\"15%\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {windows.map((data, index) => (\n                  <tr key={index}>\n                    <td>\n                      <Form.Control\n                        className=\"text-center\"\n                        type=\"text\"\n                        value={data.counter}\n                        onChange={e =>\n                          updateWindow({\n                            index,\n                            counter: e.target.value,\n                            status: data.status,\n                            number: data.number\n                          })\n                        }\n                      />\n                    </td>\n                    <td>\n                      <Form.Control\n                        value={data.status}\n                        className=\"text-center\"\n                        as=\"select\"\n                        onChange={() =>\n                          updateWindow({\n                            index,\n                            counter: data.counter,\n                            status: !data.status,\n                            number: data.number\n                          })\n                        }\n                      >\n                        <option value={true}>Open</option>\n                        <option value={false}>Close</option>\n                      </Form.Control>\n                    </td>\n                    <td>\n                      <InputGroup>\n                        <FormControl\n                          className=\"text-center\"\n                          value={data.number}\n                          onChange={e =>\n                            updateWindow({\n                              index,\n                              counter: data.counter,\n                              status: data.status,\n                              number: e.target.value\n                            })\n                          }\n                        />\n                        <InputGroup.Append>\n                          <Button\n                            variant=\"success\"\n                            onClick={() =>\n                              updateWindow({\n                                index,\n                                counter: data.counter,\n                                status: data.status,\n                                number: parseInt(data.number) + 1\n                              })\n                            }\n                          >\n                            + 1\n                          </Button>\n                          <Button\n                            variant=\"secondary\"\n                            onClick={() =>\n                              updateWindow({\n                                index,\n                                counter: data.counter,\n                                status: data.status,\n                                number: 0\n                              })\n                            }\n                          >\n                            Reset\n                          </Button>\n                        </InputGroup.Append>\n                      </InputGroup>\n                    </td>\n                    <td>\n                      <Button\n                        variant=\"outline-danger\"\n                        onClick={() => handleShow(index)}\n                      >\n                        Delete\n                      </Button>{\" \"}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n      </Card>\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Confirm</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Are you sure you want to delete?</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"danger\" onClick={() => deleteWindow(selectedWindow)}>\n            Yes\n          </Button>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            No\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal show={showNew} onHide={handleNewClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>New Counter</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form.Group controlId=\"formBasicEmail\">\n            <Form.Label>Counter</Form.Label>\n            <Form.Control\n              value={newCounter}\n              onChange={e => setNewCounter(e.target.value)}\n              type=\"text\"\n              placeholder=\"Enter counter name\"\n            />\n          </Form.Group>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"success\" onClick={() => newWindow()}>\n            Save\n          </Button>\n          <Button variant=\"outline-secondary\" onClick={handleNewClose}>\n            Cancel\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </Container>\n  );\n};\n\nexport default Index;\n","import React, { useState, useLayoutEffect, useEffect } from \"react\";\nimport { Container, Row, Col, Table, Image } from \"react-bootstrap\";\nimport { config } from \"../../core/config\";\nimport Ad from \"../../assets/images/84688527_483293078998820_6981636263551959040_n.jpg\";\nconst Index = () => {\n  const [windows, setWindows] = useState([]);\n  useEffect(() => {\n    document.title = \"Queuing System\";\n    setInterval(() => {\n      getWindows();\n    }, 500);\n  }, []);\n\n  useLayoutEffect(() => {\n    getWindows();\n  }, []);\n\n  async function getWindows() {\n    const res = await fetch(`${config.host}/windows`);\n    const body = await res.json();\n    setWindows(body.windows);\n  }\n\n  return (\n    <Container fluid>\n      <div className=\"p-1\">\n        <Row className=\"p-0 m-0\">\n          <Col className=\"p-0 m-0\" md={7}>\n            <Image src={Ad} width=\"100%\" height=\"100%\" alt=\"ad\" />\n          </Col>\n          <Col className=\"p-0 m-0\" md={5}>\n            <Table striped bordered hover className=\"text-center\">\n              <thead>\n                <tr>\n                  <th width=\"15%\">\n                    <h1\n                      style={{ fontWeight: \"900\", fontSize: \"54px\" }}\n                      className=\"p-0 m-0\"\n                    >\n                      Now Serving\n                    </h1>\n                  </th>\n                  <th width=\"20%\">\n                    <h1\n                      style={{ fontWeight: \"900\", fontSize: \"54px\" }}\n                      className=\"p-0 m-0\"\n                    >\n                      Counter\n                    </h1>\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {windows.map((data, index) => (\n                  <tr key={index}>\n                    <td>\n                      <h1\n                        style={{ fontWeight: \"900\", fontSize: \"54px\" }}\n                        className=\"p-0 m-0\"\n                      >\n                        {data.status ? data.number : \"Close\"}\n                      </h1>\n                    </td>\n                    <td>\n                      <h1\n                        style={{ fontWeight: \"900\", fontSize: \"54px\" }}\n                        className=\"p-0 m-0\"\n                      >\n                        {data.counter}\n                      </h1>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n      </div>\n    </Container>\n  );\n};\n\nexport default Index;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport AdminPage from \"./pages/admin\";\nimport ClientPage from \"./pages/client\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={AdminPage} />\n        <Route path=\"/client\" component={ClientPage} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}